from bluetooth import BLE from time import sleep_ms from KitronikPicoWBluetooth import BLEPeripheral from machine import Pin from SimplyRobotics import KitronikSimplyRobotics import utime  # Initialize board and LED board = KitronikSimplyRobotics() led = Pin("LED", Pin.OUT)  # Setup Bluetooth peripheral peripheral = BLEPeripheral(BLE())  print("Waiting for Bluetooth connection...") while not peripheral.isConnected():     sleep_ms(100)     led(1)     sleep_ms(100)     led(0)     sleep_ms(100)  led(1)  # Connected LED steady ON print("Bluetooth connected")  received = None  def writeCallback(value):     global received     received = bytes(value)     print(f"Received command: {received}")  peripheral.writeCallback = writeCallback  def readCallback():     peripheral.readCallback = None     return "START"  peripheral.readCallback = readCallback  while peripheral.readCallback is not None:     sleep_ms(50)  # Servo sweep variables sweep_pos = 0 sweep_dir = 1 running_sweep = False  def servo_sweep_step():     global sweep_pos, sweep_dir     for servo in range(8):         board.servos[servo].goToPosition(sweep_pos)     sweep_pos += sweep_dir     if sweep_pos >= 180 or sweep_pos <= 0:         sweep_dir *= -1  print("Ready to receive commands")  while peripheral.isConnected():     if received is not None:         cmd = received[0]         print(f"Processing command: {cmd}")         received = None          if cmd == 1:  # Start servo sweep             if not running_sweep:                 print("Starting servo sweep")                 sweep_pos = 0                 sweep_dir = 1             running_sweep = True          elif cmd == 4:  # Stop servo sweep             if running_sweep:                 print("Stopping servo sweep and centering servos")             running_sweep = False       if running_sweep:         servo_sweep_step()      sleep_ms(10)  print("Bluetooth disconnected, centering servos") for servo in range(8):     board.servos[servo].goToPosition(90) led(0)
